import os
import telebot
import requests
import datetime
import re
import json
import pytz
import time
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# ==========================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
SEARCH_ENGINE_ID = os.getenv("SEARCH_ENGINE_ID")
ADMIN_ID = int(os.getenv("ADMIN_ID", 1637885523))
FREE_LIMIT = 30
SUPPORT_USERNAME = "@uagptpredlozhkabot"
# ==========================

# –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —á–∞—Å–æ–≤–∞ –∑–æ–Ω–∞
UKRAINE_TZ = pytz.timezone('Europe/Kiev')

bot = telebot.TeleBot(TELEGRAM_TOKEN, timeout=60)
user_data = {}
promo_codes = {
    "TEST1H": {"seconds": 3600, "uses_left": 50},
    "WELCOME1D": {"seconds": 86400, "uses_left": 100},
    "PREMIUM7D": {"seconds": 604800, "uses_left": 30},
    "VIP30D": {"seconds": 2592000, "uses_left": 20}
}

MOVIE_SITES = [
    "imdb.com", "myanimelist.net", "anidb.net", "anime-planet.com",
    "anilist.co", "animego.org", "shikimori.one", "anime-news-network.com",
    "kinoukr.com", "film.ua", "kino-teatr.ua", "novyny.live", "telekritika.ua"
]

movie_keywords = ["—Ñ—ñ–ª—å–º", "—Å–µ—Ä—ñ–∞–ª", "–∞–Ω—ñ–º–µ", "–º—É–ª—å—Ç—Ñ—ñ–ª—å–º", "movie", "anime", "series", "–∫—ñ–Ω–æ", "—Ñ–∏–ª—å–º", "—Å—é–∂–µ—Ç", "—Å—é–∂–µ—Ç—É", "–æ–ø–∏—Å"]
code_keywords = ["–∫–æ–¥", "html", "css", "js", "javascript", "python", "—Å—Ç–≤–æ—Ä–∏", "—Å–∫—Ä–∏–ø—Ç", "–ø—Ä–æ–≥—Ä–∞–º–∞", "create", "program"]

def get_ukraine_time():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –£–∫—Ä–∞—ó–Ω–∏"""
    return datetime.datetime.now(UKRAINE_TZ)

def convert_dates(obj):
    if isinstance(obj, datetime.datetime):
        return obj.isoformat()
    elif isinstance(obj, datetime.date):
        return obj.isoformat()
    elif isinstance(obj, dict):
        return {k: convert_dates(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [convert_dates(item) for item in obj]
    return obj

def restore_dates(obj):
    if isinstance(obj, dict):
        for key, value in obj.items():
            if isinstance(value, str):
                try:
                    if 'T' in value:
                        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É
                        dt = datetime.datetime.fromisoformat(value.replace('Z', '+00:00'))
                        if dt.tzinfo is None:
                            dt = UKRAINE_TZ.localize(dt)
                        obj[key] = dt
                    elif len(value) == 10 and value.count('-') == 2:
                        obj[key] = datetime.date.fromisoformat(value)
                except (ValueError, TypeError):
                    pass
            elif isinstance(value, (dict, list)):
                restore_dates(value)
    elif isinstance(obj, list):
        for item in obj:
            restore_dates(item)
    return obj

def save_data():
    try:
        data_to_save = {
            'user_data': convert_dates(user_data),
            'promo_codes': promo_codes
        }
        with open('bot_data.json', 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

def load_data():
    global user_data, promo_codes
    try:
        if not os.path.exists('bot_data.json'):
            return
            
        with open('bot_data.json', 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if not content:
                return
                
            data = json.loads(content)
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—Å—ñ –∫–ª—é—á—ñ –≤ int –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
            user_data = {int(k): restore_dates(v) for k, v in data.get('user_data', {}).items()}
            promo_codes = data.get('promo_codes', promo_codes)
            
    except json.JSONDecodeError:
        try:
            os.rename('bot_data.json', 'bot_data_corrupted.json')
        except:
            pass
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")

def parse_time_input(time_str):
    time_str = time_str.lower().strip()
    
    if time_str == "forever":
        return None
    
    match = re.match(r'(\d+)\s*([mhdwmy]|min|minute|hour|day|week|month|year)', time_str)
    if not match:
        return None
    
    amount = int(match.group(1))
    unit = match.group(2)
    
    if unit in ['m', 'min', 'minute']:
        return amount * 60
    elif unit in ['h', 'hour']:
        return amount * 3600
    elif unit in ['d', 'day']:
        return amount * 86400
    elif unit in ['w', 'week']:
        return amount * 604800
    elif unit in ['month']:
        return amount * 2592000
    elif unit in ['y', 'year']:
        return amount * 31536000
    
    return None

def format_time(seconds):
    if seconds is None:
        return "–ù–ê–ó–ê–í–ñ–î–ò ‚ôæÔ∏è"
    
    if seconds < 60:
        return f"{seconds} —Å–µ–∫—É–Ω–¥"
    elif seconds < 3600:
        return f"{seconds//60} —Ö–≤–∏–ª–∏–Ω"
    elif seconds < 86400:
        return f"{seconds//3600} –≥–æ–¥–∏–Ω"
    elif seconds < 604800:
        return f"{seconds//86400} –¥–Ω—ñ–≤"
    elif seconds < 2592000:
        return f"{seconds//604800} —Ç–∏–∂–Ω—ñ–≤"
    elif seconds < 31536000:
        return f"{seconds//2592000} –º—ñ—Å—è—Ü—ñ–≤"
    else:
        return f"{seconds//31536000} —Ä–æ–∫—ñ–≤"

def google_search(query, search_type="movie"):
    sites_query = " OR ".join([f"site:{site}" for site in MOVIE_SITES])
    
    if search_type == "movie":
        query = f"{query} ({sites_query})"
    
    url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={GOOGLE_API_KEY}&cx={SEARCH_ENGINE_ID}"
    try:
        r = requests.get(url, timeout=10)
        data = r.json()
        results = []
        
        if "items" in data:
            for item in data["items"][:5]:
                if any(site in item['link'] for site in MOVIE_SITES):
                    results.append(f"{item['title']}\n{item['link']}")
        
        return "\n\n".join(results) if results else "üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∫—ñ–Ω–æ-—Å–∞–π—Ç–∞—Ö üòî"
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}"

def ask_gemini(user_id, question, context_messages=None):
    if context_messages is None:
        context_messages = []
    
    context_text = "\n".join(context_messages[-6:])
    
    if any(word in question.lower() for word in movie_keywords) or any(keyword in context_text.lower() for keyword in movie_keywords):
        prompt = f"""–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ—ñ–ª—å–º–∞—Ö, —Å–µ—Ä—ñ–∞–ª–∞—Ö —Ç–∞ –∞–Ω—ñ–º–µ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–û–ß–ù–û —Ç–∞ –ö–û–ù–ö–†–ï–¢–ù–û.
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Ä–æ–∑–º–æ–≤–∏:
        {context_text}
        
        –ü–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç: {question}
        
        –í–∫–∞–∂–∏ –¢–û–ß–ù–£ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:
        üé¨ –ù–∞–∑–≤–∞: 
        üìÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É: 
        üåç –ö—Ä–∞—ó–Ω–∞: 
        üé≠ –ñ–∞–Ω—Ä: 
        ‚≠ê –†–µ–π—Ç–∏–Ω–≥ (—è–∫—âo –≤—ñ–¥–æ–º–∏–π): 
        üìñ –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Å—é–∂–µ—Ç—É (2-3 —Ä–µ—á–µ–Ω–Ω—è):
        
        –Ø–∫—âo —Ü–µ —Å–µ—Ä—ñ–∞–ª - –≤–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∑–æ–Ω—ñ–≤.
        –Ø–∫—âo —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞—î—à - —Ç–∞–∫ —ñ —Å–∫–∞–∂–∏, –Ω–µ –≤–∏–≥–∞–¥—É–π."""
    
    elif any(word in question.lower() for word in code_keywords):
        prompt = f"""–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ß–Ü–¢–ö–ò–ú –ö–û–î–û–ú –Ω–∞ –∑–∞–ø–∏—Ç.
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Ä–æ–∑–º–æ–≤–∏:
        {context_text}
        
        –ü–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç: {question}
        
        –í–ò–ú–û–ì–ò:
        1. –ù–∞–¥–∞–π –ü–û–í–ù–ò–ô —Ä–æ–±–æ—á–∏–π –∫–æ–¥
        2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —á—ñ—Ç–∫–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑ ``` 
        3. –î–æ–¥–∞–π –∫–æ—Ä–æ—Ç–∫—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è
        4. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è —â–æ –∫–æ–¥ –ø—Ä–∞—Ü—é—î
        5. –Ø–∫—âo –ø–æ—Ç—Ä—ñ–±–Ω–æ - –≤–∫–∞–∂–∏ —è–∫—É –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à"""
    
    else:
        prompt = f"""–¢–∏ –¥—Ä—É–∂–Ω—ñ–π —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω–∏–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–∏—Ä–æ–¥–Ω—åo —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ.
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Ä–æ–∑–º–æ–≤–∏:
        {context_text}
        
        –ü–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç: {question}
        
        –í–∏–º–æ–≥–∏ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
        1. –ë—É–¥—å –ø—Ä–∏—Ä–æ–¥–Ω—ñ–º —Ç–∞ –¥—Ä—É–∂–Ω—ñ–º
        2. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ –∞–ª–µ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ
        3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
        4. –Ø–∫—âo –ø–∏—Ç–∞–Ω—å –ø—Ä–æ —Ñ—ñ–ª—å–º–∏/–∫–æ–¥ - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        5. –ë—É–¥—å –∫–æ—Ä–∏—Å–Ω–∏–º —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º"""

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [
            {"parts": [{"text": prompt}]}
        ]
    }
    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        result = response.json()
        if "candidates" in result:
            reply = result["candidates"][0]["content"]["parts"][0]["text"]
            return reply
        else:
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ API."
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

def create_copy_button(code_text):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥", callback_data=f"copy_{hash(code_text)}"))
    return keyboard

def premium_menu_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"))
    kb.add(KeyboardButton("üí≥ –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º"))
    kb.add(KeyboardButton("üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"))
    kb.add(KeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
    return kb

def admin_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"))
    kb.add(KeyboardButton("üé´ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"))
    kb.add(KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º"))
    kb.add(KeyboardButton("‚è∞ –ü—Ä–µ–º—ñ—É–º –Ω–∞ —á–∞—Å"))
    kb.add(KeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"))
    kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    kb.add(KeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
    return kb

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìä –ü—Ä–æ—Ñ—ñ–ª—å"))
    kb.add(KeyboardButton("üíé –ü—Ä–µ–º—ñ—É–º"))
    kb.add(KeyboardButton("üÜò –î–æ–ø–æ–º–æ–≥–∞"))
    if ADMIN_ID:
        kb.add(KeyboardButton("‚öôÔ∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"))
    return kb

def help_text():
    return (
        "ü§ñ <b>–©–æ –º–æ–∂–µ —Ü–µ–π –±–æ—Ç:</b>\n\n"
        "üé¨ <b>–ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—ñ–≤/—Å–µ—Ä—ñ–∞–ª—ñ–≤/–∞–Ω—ñ–º–µ:</b>\n"
        "‚Ä¢ –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–∞ –Ω–∞–∑–≤–æ—é, —Ä–æ–∫–æ–º, –∫—Ä–∞—ó–Ω–æ—é\n"
        "‚Ä¢ –ü–æ—à—É–∫ –∑–∞ –æ–ø–∏—Å–æ–º —Å—é–∂–µ—Ç—É\n"
        "‚Ä¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–π—Ç–∏–Ω–≥ —Ç–∞ –∂–∞–Ω—Ä\n"
        "‚Ä¢ –ü–æ—à—É–∫ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ç–∞ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏—Ö —Å–∞–π—Ç–∞—Ö\n\n"
        "üíª <b>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É:</b>\n"
        "‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML/CSS/JS –∫–æ–¥—ñ–≤\n"
        "‚Ä¢ Python —Å–∫—Ä–∏–ø—Ç–∏ —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–∏\n"
        "‚Ä¢ –ó—Ä—É—á–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n\n"
        "üí¨ <b>–ó–≤–∏—á–∞–π–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:</b>\n"
        "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å-—è–∫—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n"
        "‚Ä¢ –î–æ–ø–æ–º–æ–≥–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ç–µ–º\n"
        "‚Ä¢ –î—Ä—É–∂–Ω—ñ–π —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π —Å—Ç–∏–ª—å\n\n"
        "üíé <b>–ü—Ä–µ–º—ñ—É–º —Å–∏—Å—Ç–µ–º–∞:</b>\n"
        "‚Ä¢ –ù–µ–æ–±–º–µ–∂–µ–Ω—ñ –∑–∞–ø–∏—Ç–∏\n"
        "‚Ä¢ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞\n"
        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ñ—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\n\n"
        "‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "‚Ä¢ /profile - –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—é\n"
        "‚Ä¢ /premium - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–µ–º—ñ—É–º\n"
        "‚Ä¢ /clearduplicates - –û—á–∏—Å—Ç–∏—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏ (–∞–¥–º—ñ–Ω)\n\n"
        f"üêû <b>–ó–Ω–∞–π—à–ª–∏ –±–∞–≥–∏ —á–∏ —î —ñ–¥–µ—ó?</b>\n"
        f"–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {SUPPORT_USERNAME}"
    )

load_data()

@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {
            "used": 0,
            "premium": {"active": False, "until": None},
            "reset": get_ukraine_time().date().isoformat(),
            "history": [],
            "free_used": False,
            "last_movie_query": None,
            "last_code": None,
            "username": message.from_user.username
        }
        save_data()
    bot.reply_to(message, "üëã –í—ñ—Ç–∞—é! –Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫! –ú–æ–∂—É:\n‚Ä¢ üé¨ –®—É–∫–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏/—Å–µ—Ä—ñ–∞–ª–∏/–∞–Ω—ñ–º–µ\n‚Ä¢ üíª –ü–∏—Å–∞—Ç–∏ –∫–æ–¥\n‚Ä¢ üí¨ –í—ñ–ª—å–Ω–æ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ! üòä", reply_markup=main_menu())

@bot.message_handler(commands=["profile"])
def profile_command(message):
    profile(message)

@bot.message_handler(func=lambda m: m.text == "üìä –ü—Ä–æ—Ñ—ñ–ª—å")
def profile(message):
    user_id = message.from_user.id
    if user_id not in user_data:
        start(message)
        return
    user = user_data[user_id]
    today = get_ukraine_time().date()
    
    if isinstance(user["reset"], str):
        reset_date = datetime.date.fromisoformat(user["reset"])
    else:
        reset_date = user["reset"]
    
    if reset_date != today:
        user["used"] = 0
        user["reset"] = today.isoformat()
        save_data()
    
    premium_status = "‚ùå –ù–µ–º–∞—î"
    if user["premium"]["active"]:
        if user["premium"]["until"] is None:
            premium_status = "‚ôæÔ∏è –ù–∞–∑–∞–≤–∂–¥–∏"
        else:
            if isinstance(user["premium"]["until"], str):
                until_date = datetime.datetime.fromisoformat(user["premium"]["until"])
                if until_date.tzinfo is None:
                    until_date = UKRAINE_TZ.localize(until_date)
            else:
                until_date = user["premium"]["until"]
            
            current_time = get_ukraine_time()
            if until_date > current_time:
                premium_status = f"‚úÖ –î–æ {until_date.astimezone(UKRAINE_TZ).strftime('%d.%m.%Y %H:%M')}"
            else:
                user["premium"] = {"active": False, "until": None}
                save_data()
    
    role = "üëë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if user_id == ADMIN_ID else ("üíé –ü—Ä–µ–º—ñ—É–º" if user["premium"]["active"] else "üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    limit_info = "‚ôæÔ∏è –ù–µ–æ–±–º–µ–∂–µ–Ω–æ" if (user["premium"]["active"] or user_id == ADMIN_ID) else f"{user['used']}/{FREE_LIMIT}"
    
    profile_text = (
        f"üìä <b>–ü—Ä–æ—Ñ—ñ–ª—å:</b>\n\n"
        f"üÜî ID: {user_id}\n"
        f"üë§ –Ü–º'—è: @{user.get('username', 'unknown')}\n"
        f"üé≠ –†–æ–ª—å: {role}\n"
        f"üíé –ü—Ä–µ–º—ñ—É–º: {premium_status}\n"
        f"üí¨ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: {user['used']}\n"
        f"üîã –õ—ñ–º—ñ—Ç: {limit_info}\n"
        f"‚è∞ –û–Ω–æ–≤–ª–µ–Ω–Ω—è: –æ–ø—ñ–≤–Ω–æ—á—ñ (–∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º)\n\n"
        f"üêû –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞: {SUPPORT_USERNAME}"
    )
    bot.reply_to(message, profile_text, parse_mode="HTML")

@bot.message_handler(commands=["premium"])
def premium_command(message):
    premium_info(message)

@bot.message_handler(func=lambda m: m.text == "üíé –ü—Ä–µ–º—ñ—É–º")
def premium_info(message):
    text = (
        "üíé <b>–ü—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∞:</b>\n\n"
        "‚úÖ <b>–ü–µ—Ä–µ–≤–∞–≥–∏:</b>\n"
        "‚Ä¢ ‚ôæÔ∏è –ù–µ–æ–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤\n"
        "‚Ä¢ ‚ö° –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤\n"
        "‚Ä¢ üé¨ –î–µ—Ç–∞–ª—å–Ω—ñ—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ —Ñ—ñ–ª—å–º–∏\n"
        "‚Ä¢ üíª –ë—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–∏–π –∫–æ–¥\n\n"
        "üé´ <b>–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º:</b>\n"
        "‚Ä¢ –í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "‚Ä¢ –ü—Ä–∏–¥–±–∞–π—Ç–µ –ø—ñ–¥–ø–∏—Å–∫—É\n\n"
        "üí≥ <b>–¶—ñ–Ω–∏:</b>\n"
        "‚Ä¢ 1 –¥–µ–Ω—å - 50 –≥—Ä–Ω\n"
        "‚Ä¢ 7 –¥–Ω—ñ–≤ - 250 –≥—Ä–Ω\n"
        "‚Ä¢ 30 –¥–Ω—ñ–≤ - 800 –≥—Ä–Ω\n\n"
        "üì± –î–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ @uagptpredlozhkabot"
    )
    bot.reply_to(message, text, parse_mode="HTML", reply_markup=premium_menu_keyboard())

@bot.message_handler(func=lambda m: m.text == "üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
def enter_promo(message):
    bot.reply_to(message, "üîë –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
    bot.register_next_step_handler(message, process_promo)

def process_promo(message):
    user_id = message.from_user.id
    promo = message.text.strip().upper()
    
    if promo in promo_codes:
        code_data = promo_codes[promo]
        if code_data["uses_left"] > 0:
            if user_data[user_id]["premium"]["active"]:
                current_until = user_data[user_id]["premium"]["until"]
                if current_until is None:
                    bot.reply_to(message, "‚ùå –£ –≤–∞—Å –≤–∂–µ —î –±–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–∏–π –ø—Ä–µ–º—ñ—É–º!")
                    return
                
                if isinstance(current_until, str):
                    current_until = datetime.datetime.fromisoformat(current_until)
                    if current_until.tzinfo is None:
                        current_until = UKRAINE_TZ.localize(current_until)
                
                new_until = current_until + datetime.timedelta(seconds=code_data["seconds"])
            else:
                new_until = get_ukraine_time() + datetime.timedelta(seconds=code_data["seconds"])
            
            user_data[user_id]["premium"] = {
                "active": True,
                "until": new_until
            }
            code_data["uses_left"] -= 1
            save_data()
            
            bot.reply_to(message, f"‚úÖ –ü—Ä–µ–º—ñ—É–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–æ {new_until.astimezone(UKRAINE_TZ).strftime('%d.%m.%Y %H:%M')}!")
        else:
            bot.reply_to(message, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –≤–∏—á–µ—Ä–ø–∞–Ω–æ!")
    else:
        bot.reply_to(message, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥!")

@bot.message_handler(func=lambda m: m.text == "üí≥ –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º")
def buy_premium(message):
    bot.reply_to(message, "üí≥ –î–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º –ø—ñ–¥–ø–∏—Å–∫–∏ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ @uagptpredlozhkabot")

@bot.message_handler(func=lambda m: m.text == "üÜò –î–æ–ø–æ–º–æ–≥–∞")
def help_command(message):
    bot.reply_to(message, help_text(), parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å" and m.from_user.id == ADMIN_ID)
def admin_panel(message):
    bot.reply_to(message, "‚öôÔ∏è <b>–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å:</b>", parse_mode="HTML", reply_markup=admin_keyboard())

@bot.message_handler(func=lambda m: m.text == "üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
def back_to_main(message):
    bot.reply_to(message, "üè† <b>–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:</b>", parse_mode="HTML", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == "üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤" and m.from_user.id == ADMIN_ID)
def user_list(message):
    users_text = "üë• <b>–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n\n"
    for uid, data in list(user_data.items())[:50]:
        premium_status = "‚úÖ" if data["premium"]["active"] else "‚ùå"
        users_text += f"ID: {uid} | @{data.get('username', 'unknown')} | –ü—Ä–µ–º—ñ—É–º: {premium_status} | –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {data['used']}\n"
    
    users_text += f"\nüìä –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(user_data)}"
    bot.reply_to(message, users_text, parse_mode="HTML")

@bot.message_handler(func=lambda m: m.text == "üé´ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏" and m.from_user.id == ADMIN_ID)
def manage_promos(message):
    promos_text = "üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥–∏:</b>\n\n"
    for code, data in promo_codes.items():
        promos_text += f"üîë {code}: {data['uses_left']} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å | {format_time(data['seconds'])}\n"
    
    promos_text += "\n‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π: /addpromo –∫–æ–¥ —á–∞—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å\n‚ùå –í–∏–¥–∞–ª–∏—Ç–∏: /removepromo –∫–æ–¥"
    bot.reply_to(message, promos_text, parse_mode="HTML")

@bot.message_handler(commands=["addpromo"])
def add_promo(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 4:
            bot.reply_to(message, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addpromo –∫–æ–¥ —á–∞—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /addpromo TEST1H 3600 50")
            return
        
        code = parts[1].upper()
        seconds = int(parts[2])
        uses = int(parts[3])
        
        promo_codes[code] = {"seconds": seconds, "uses_left": uses}
        save_data()
        bot.reply_to(message, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} –¥–æ–¥–∞–Ω–æ!")
    except:
        bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É!")

@bot.message_handler(commands=["removepromo"])
def remove_promo(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        code = message.text.split()[1].upper()
        if code in promo_codes:
            del promo_codes[code]
            save_data()
            bot.reply_to(message, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            bot.reply_to(message, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    except:
        bot.reply_to(message, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /removepromo –∫–æ–¥")

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º" and m.from_user.id == ADMIN_ID)
def add_premium_prompt(message):
    bot.reply_to(message, "üë§ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –ø—Ä–µ–º—ñ—É–º—É:")
    bot.register_next_step_handler(message, process_add_premium)

def process_add_premium(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        user_id = int(message.text.strip())
        user_data[user_id]["premium"] = {"active": True, "until": None}
        save_data()
        bot.reply_to(message, f"‚úÖ –ë–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–∏–π –ø—Ä–µ–º—ñ—É–º –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}!")
    except:
        bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ID.")

@bot.message_handler(func=lambda m: m.text == "‚è∞ –ü—Ä–µ–º—ñ—É–º –Ω–∞ —á–∞—Å" and m.from_user.id == ADMIN_ID)
def timed_premium_prompt(message):
    bot.reply_to(message, "üë§ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ: id —á–∞—Å\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1234567 7d")
    bot.register_next_step_handler(message, process_timed_premium)

def process_timed_premium(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 2:
            bot.reply_to(message, "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: id —á–∞—Å\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 1234567 7d")
            return
        
        user_id = int(parts[0])
        time_input = " ".join(parts[1:])
        
        seconds = parse_time_input(time_input)
        if seconds is None:
            bot.reply_to(message, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É!")
            return
        
        until_time = get_ukraine_time() + datetime.timedelta(seconds=seconds)
        user_data[user_id]["premium"] = {
            "active": True,
            "until": until_time
        }
        save_data()
        
        bot.reply_to(message, f"‚úÖ –ü—Ä–µ–º—ñ—É–º –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –¥–æ {until_time.astimezone(UKRAINE_TZ).strftime('%d.%m.%Y %H:%M')}!")
    except:
        bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ.")

@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" and m.from_user.id == ADMIN_ID)
def delete_user_prompt(message):
    bot.reply_to(message, "üë§ –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    bot.register_next_step_handler(message, process_delete_user)

def process_delete_user(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        user_id = int(message.text.strip())
        if user_id in user_data:
            del user_data[user_id]
            save_data()
            bot.reply_to(message, f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤–∏–¥–∞–ª–µ–Ω–æ!")
        else:
            bot.reply_to(message, "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    except:
        bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ID.")

@bot.message_handler(func=lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and m.from_user.id == ADMIN_ID)
def stats(message):
    total_users = len(user_data)
    premium_users = sum(1 for u in user_data.values() if u["premium"]["active"])
    total_used = sum(u["used"] for u in user_data.values())
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
        f"üíé –ü—Ä–µ–º—ñ—É–º: {premium_users}\n"
        f"üî¢ –ó–≤–∏—á–∞–π–Ω–∏—Ö: {total_users - premium_users}\n"
        f"üí¨ –ó–∞–ø–∏—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: {total_used}\n"
        f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ñ–≤: {len(promo_codes)}"
    )
    bot.reply_to(message, stats_text, parse_mode="HTML")

@bot.message_handler(commands=["clearduplicates"])
def clear_duplicates(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    unique_users = {}
    duplicates_removed = 0
    
    for uid, data in user_data.items():
        if uid not in unique_users:
            unique_users[uid] = data
        else:
            duplicates_removed += 1
    
    user_data.clear()
    user_data.update(unique_users)
    save_data()
    
    bot.reply_to(message, f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {duplicates_removed} –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤! –ó–∞–ª–∏—à–∏–ª–æ—Å—å {len(user_data)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

@bot.callback_query_handler(func=lambda call: call.data.startswith("copy_"))
def copy_code(call):
    code_hash = call.data[5:]
    for user in user_data.values():
        if user["last_code"] and hash(user["last_code"]) == int(code_hash):
            bot.answer_callback_query(call.id, "üìã –ö–æ–¥ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!")
            return
    bot.answer_callback_query(call.id, "‚ùå –ö–æ–¥ –≤–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π!")

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤ –±–∞–∑—ñ
    if user_id not in user_data:
        user_data[user_id] = {
            "used": 0,
            "premium": {"active": False, "until": None},
            "reset": get_ukraine_time().date().isoformat(),
            "history": [],
            "free_used": False,
            "last_movie_query": None,
            "last_code": None,
            "username": message.from_user.username
        }
        save_data()
    
    user = user_data[user_id]
    today = get_ukraine_time().date()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∏–Ω—É—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    if isinstance(user["reset"], str):
        reset_date = datetime.date.fromisoformat(user["reset"])
    else:
        reset_date = user["reset"]
    
    if reset_date != today:
        user["used"] = 0
        user["reset"] = today.isoformat()
        save_data()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è –ø—Ä–µ–º—ñ—É–º
    if user["premium"]["active"] and user["premium"]["until"] is not None:
        if isinstance(user["premium"]["until"], str):
            until_date = datetime.datetime.fromisoformat(user["premium"]["until"])
            if until_date.tzinfo is None:
                until_date = UKRAINE_TZ.localize(until_date)
        else:
            until_date = user["premium"]["until"]
        
        if until_date < get_ukraine_time():
            user["premium"] = {"active": False, "until": None}
            save_data()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏
    is_premium = user["premium"]["active"] or user_id == ADMIN_ID
    if not is_premium and user["used"] >= FREE_LIMIT:
        if not user["free_used"]:
            user["free_used"] = True
            save_data()
            bot.reply_to(message, f"‚ùå –í–∏ –≤–∏—á–µ—Ä–ø–∞–ª–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ª—ñ–º—ñ—Ç ({FREE_LIMIT} –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –¥–µ–Ω—å).\n\nüíé –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–µ–º—ñ—É–º –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤!", reply_markup=premium_menu_keyboard())
        else:
            bot.reply_to(message, f"‚ùå –õ—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–µ–º—ñ—É–º üíé", reply_markup=premium_menu_keyboard())
        return
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç
    user["used"] += 1
    user["history"].append(message.text)
    if len(user["history"]) > 10:
        user["history"].pop(0)
    
    save_data()
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∑–∞–ø–∏—Ç—É
    question = message.text.lower()
    is_movie_query = any(word in question for word in movie_keywords)
    is_code_query = any(word in question for word in code_keywords)
    
    if is_movie_query:
        user["last_movie_query"] = message.text
        search_results = google_search(message.text)
        if "üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" not in search_results:
            bot.reply_to(message, f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:</b>\n\n{search_results}\n\nüìù <b>–ê –æ—Å—å –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>", parse_mode="HTML")
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ AI
    bot.send_chat_action(message.chat.id, "typing")
    response = ask_gemini(user_id, message.text, user["history"])
    
    if is_code_query and "```" in response:
        user["last_code"] = response
        bot.reply_to(message, response, parse_mode="Markdown", reply_markup=create_copy_button(response))
    else:
        bot.reply_to(message, response)

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —á–∞—Å–æ–º —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –∫–µ—Ä—É–≤–∞–Ω–Ω—è–º!")
    
    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=60, restart_on_change=True)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
