import os
import telebot
import requests
import datetime
import re
import json
import pytz
import time
import signal
import atexit
import threading
import pymongo
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
SEARCH_ENGINE_ID = os.getenv("SEARCH_ENGINE_ID")
ADMIN_ID = int(os.getenv("ADMIN_ID", 1637885523))
MONGODB_URI = os.getenv("MONGODB_URI")
FREE_LIMIT = 30
SUPPORT_USERNAME = "@uagptpredlozhkabot"
AUTOSAVE_INTERVAL = 300

user_data = {}
promo_codes = {
    "TEST1H": {"seconds": 3600, "uses_left": 50},
    "WELCOME1D": {"seconds": 86400, "uses_left": 100},
    "PREMIUM7D": {"seconds": 604800, "uses_left": 30},
    "VIP30D": {"seconds": 2592000, "uses_left": 20}
}
BOT_ENABLED = True

# –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–∞–π—Ç–∏ —â–æ –ø—Ä–∞—Ü—é—é—Ç—å –±–µ–∑ VPN
BASE_MOVIE_SITES = [
    # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∫—ñ–Ω–æ—Å–∞–π—Ç–∏
    "kinoukr.com", "film.ua", "kino-teatr.ua", "novyny.live", 
    "telekritika.ua", "moviegram.com.ua", "kinofilms.ua",
    
    # –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –º–µ–¥—ñ–∞ –ø—Ä–æ –∫—ñ–Ω–æ
    "vgolos.com.ua", "kinozagolovkom.com.ua", "cinema.in.ua",
    
    # –ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ —Å–∞–π—Ç–∏ —â–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ –£–∫—Ä–∞—ó–Ω—ñ
    "imdb.com", "themoviedb.org", "letterboxd.com",
    
    # –ê–Ω—ñ–º–µ —Å–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ –£–∫—Ä–∞—ó–Ω—ñ
    "myanimelist.net", "anilist.co", "anime-planet.com",
    
    # –ö—ñ–Ω–æ–ø–æ—Ä—Ç–∞–ª–∏
    "rottentomatoes.com", "metacritic.com", "boxofficemojo.com"
]

PREMIUM_MOVIE_SITES = BASE_MOVIE_SITES

movie_keywords = ["—Ñ—ñ–ª—å–º", "—Å–µ—Ä—ñ–∞–ª", "–∞–Ω—ñ–º–µ", "–º—É–ª—å—Ç—Ñ—ñ–ª—å–º", "movie", "anime", "series", "–∫—ñ–Ω–æ", "—Ñ–∏–ª—å–º", "—Å—é–∂–µ—Ç", "—Å—é–∂–µ—Ç—É", "–æ–ø–∏—Å"]
code_keywords = ["–∫–æ–¥", "html", "css", "js", "javascript", "python", "—Å—Ç–≤–æ—Ä–∏", "—Å–∫—Ä–∏–ø—Ç", "–ø—Ä–æ–≥—Ä–∞–º–∞", "create", "program"]

UKRAINE_TZ = pytz.timezone('Europe/Kiev')

bot = telebot.TeleBot(TELEGRAM_TOKEN)

try:
    client = pymongo.MongoClient(
        MONGODB_URI,
        tls=True,
        retryWrites=True,
        w='majority',
        connectTimeoutMS=30000,
        socketTimeoutMS=30000,
        serverSelectionTimeoutMS=30000
    )
    
    client.admin.command('ping')
    db = client["telegram_bot"]
    users_collection = db["users"]
    promo_collection = db["promo_codes"]
    bot_settings_collection = db["bot_settings"]
    print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ MongoDB Atlas!")
    
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
    print("‚ö†Ô∏è  –ë–æ—Ç –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –≤ —Ä–µ–∂–∏–º—ñ –±–µ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    users_collection = None
    promo_collection = None
    bot_settings_collection = None

def load_data():
    global user_data, promo_codes, BOT_ENABLED
    
    if users_collection is None:
        print("‚ùå MongoDB –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
        return
    
    try:
        user_data = {}
        for user in users_collection.find():
            user_data[user['_id']] = user
            if 'reset' in user and isinstance(user['reset'], str):
                user_data[user['_id']]['reset'] = datetime.date.fromisoformat(user['reset'])
            if 'premium' in user and 'until' in user['premium'] and user['premium']['until'] and isinstance(user['premium']['until'], str):
                dt = datetime.datetime.fromisoformat(user['premium']['until'].replace('Z', '+00:00'))
                if dt.tzinfo is None:
                    dt = UKRAINE_TZ.localize(dt)
                user_data[user['_id']]['premium']['until'] = dt
        
        promo_doc = promo_collection.find_one({"_id": "active_promos"})
        if promo_doc:
            promo_codes = promo_doc.get('codes', {})
        else:
            promo_collection.update_one(
                {"_id": "active_promos"},
                {"$set": {"codes": promo_codes}},
                upsert=True
            )
        
        settings = bot_settings_collection.find_one({"_id": "main_settings"})
        if settings:
            BOT_ENABLED = settings.get('enabled', True)
        else:
            BOT_ENABLED = True
            bot_settings_collection.insert_one({"_id": "main_settings", "enabled": True})
            
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(user_data)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ MongoDB")
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(promo_codes)} –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

def get_ukraine_time():
    return datetime.datetime.now(UKRAINE_TZ)

def save_data():
    try:
        if users_collection is None:
            print("‚ùå MongoDB –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
            return
            
        for user_id, user_data_item in user_data.items():
            user_to_save = user_data_item.copy()
            if 'reset' in user_to_save and isinstance(user_to_save['reset'], datetime.date):
                user_to_save['reset'] = user_to_save['reset'].isoformat()
            if 'premium' in user_to_save and 'until' in user_to_save['premium'] and user_to_save['premium']['until'] and isinstance(user_to_save['premium']['until'], datetime.datetime):
                user_to_save['premium']['until'] = user_to_save['premium']['until'].isoformat()
            
            users_collection.update_one(
                {"_id": user_id},
                {"$set": user_to_save},
                upsert=True
            )
        
        promo_collection.update_one(
            {"_id": "active_promos"},
            {"$set": {"codes": promo_codes}},
            upsert=True
        )
        
        bot_settings_collection.update_one(
            {"_id": "main_settings"},
            {"$set": {"enabled": BOT_ENABLED}},
            upsert=True
        )
        
        print(f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ MongoDB –æ {get_ukraine_time().strftime('%H:%M:%S')}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

def auto_save():
    save_data()
    threading.Timer(AUTOSAVE_INTERVAL, auto_save).start()

def exit_handler():
    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏... –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ.")
    save_data()

signal.signal(signal.SIGINT, lambda s, f: exit_handler())
signal.signal(signal.SIGTERM, lambda s, f: exit_handler())
atexit.register(exit_handler)

def check_bot_enabled(message):
    if not BOT_ENABLED and message.from_user.id != ADMIN_ID:
        maintenance_text = (
            "üîß **–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏**\n"
            "–í–∏–±–∞—á—Ç–µ –∑–∞ —Ç–∏–º—á–∞—Å–æ–≤—ñ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ! \n"
            "–ëot —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.\n\n"
            "üïê **–ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —á–∞—Å:** 1-2 –≥–æ–¥–∏–Ω–∏\n"
            "‚ú® **–©–æ –Ω–æ–≤–æ–≥–æ:** –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏\n\n"
            "–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ @uagptpredlozhkabot –¥–ª—è –ø–∏—Ç–∞–Ω—å"
        )
        bot.reply_to(message, maintenance_text, parse_mode="Markdown")
        return False
    return True

def parse_time_input(time_str):
    time_str = time_str.lower().strip()
    
    if time_str == "forever":
        return None
    
    match = re.match(r'(\d+)\s*([mhdwmy]|min|minute|hour|day|week|month|year)', time_str)
    if not match:
        return None
    
    amount = int(match.group(1))
    unit = match.group(2)
    
    if unit in ['m', 'min', 'minute']:
        return amount * 60
    elif unit in ['h', 'hour']:
        return amount * 3600
    elif unit in ['d', 'day']:
        return amount * 86400
    elif unit in ['w', 'week']:
        return amount * 604800
    elif unit in ['month']:
        return amount * 2592000
    elif unit in ['y', 'year']:
        return amount * 31536000
    
    return None

def format_time(seconds):
    if seconds is None:
        return "–ù–ê–ó–ê–í–ñ–î–ò ‚ôæÔ∏è"
    
    if seconds < 60:
        return f"{seconds} —Å–µ–∫—É–Ω–¥"
    elif seconds < 3600:
        return f"{seconds//60} —Ö–≤–∏–ª–∏–Ω"
    elif seconds < 86400:
        return f"{seconds//3600} –≥–æ–¥–∏–Ω"
    elif seconds < 604800:
        return f"{seconds//86400} –¥–Ω—ñ–≤"
    elif seconds < 2592000:
        return f"{seconds//604800} —Ç–∏–∂–Ω—ñ–≤"
    elif seconds < 31536000:
        return f"{seconds//2592000} –º—ñ—Å—è—Ü—ñ–≤"
    else:
        return f"{seconds//31536000} —Ä–æ–∫—ñ–≤"

def is_russian_site(url):
    russian_domains = ['.ru', '.—Ä—Ñ', 'tinkoff', 'yandex', 'mail.ru', 'rambler', 'kinopoisk']
    return any(domain in url for domain in russian_domains)

def google_search(query, user_id=None):
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ —Ü–µ –ø—Ä–µ–º—ñ—É–º-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    is_premium = False
    if user_id and user_id in user_data:
        user = user_data[user_id]
        is_premium = user.get('premium', {}).get('active', False) or user_id == ADMIN_ID
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–∞–π—Ç–∏
    sites_to_use = BASE_MOVIE_SITES
    
    # –î–æ–¥–∞—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∂–∞–Ω—Ä—ñ–≤
    genre_keywords = {
        "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ": "disaster catastrophe",
        "–∂–∞—Ö—ñ–≤": "horror scary",
        "–∫–æ–º–µ–¥—ñ": "comedy funny",
        "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫": "sci-fi fantasy",
        "–±–æ–π–æ–≤–∏–∫": "action adventure",
        "–¥—Ä–∞–º": "drama emotional",
        "–º–µ–ª–æ–¥—Ä–∞–º": "romance romantic",
        "—Ç—Ä–∏–ª–µ—Ä": "thriller suspense",
        "–¥–µ—Ç–µ–∫—Ç–∏–≤": "detective mystery",
        "–∞–Ω—ñ–º–µ": "anime japanese"
    }
    
    enhanced_query = query
    for ukr_keyword, eng_keyword in genre_keywords.items():
        if ukr_keyword in query.lower():
            enhanced_query = f"{query} {eng_keyword}"
            break
    
    # –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Å–∞–π—Ç–∞–º–∏
    sites_query = " OR ".join([f"site:{site}" for site in sites_to_use])
    final_query = f"{enhanced_query} ({sites_query})"
    
    # –î–ª—è –ø—Ä–µ–º—ñ—É–º-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    num_results = 8 if is_premium else 5
    
    url = f"https://www.googleapis.com/customsearch/v1?q={final_query}&key={GOOGLE_API_KEY}&cx={SEARCH_ENGINE_ID}&num={num_results}"
    
    try:
        r = requests.get(url, timeout=15)
        data = r.json()
        results = []
        
        if "items" in data:
            for item in data["items"]:
                # –ë–ª–æ–∫—É—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Å–∞–π—Ç–∏
                if is_russian_site(item.get('link', '')):
                    continue
                    
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∫—ñ–Ω–æ-—Å–∞–π—Ç
                if any(site in item['link'] for site in sites_to_use):
                    # –î–ª—è –ø—Ä–µ–º—ñ—É–º-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
                    if is_premium:
                        snippet = item.get('snippet', '')
                        if snippet:
                            snippet = snippet[:200] + "..." if len(snippet) > 200 else snippet
                            results.append(f"üé¨ {item['title']}\nüìù {snippet}\nüîó {item['link']}")
                        else:
                            results.append(f"üé¨ {item['title']}\nüîó {item['link']}")
                    else:
                        results.append(f"üé¨ {item['title']}\nüîó {item['link']}")
        
        if results:
            # –°–æ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ - —Å–ø–æ—á–∞—Ç–∫—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–∞–π—Ç–∏
            def sort_key(result):
                if "kinoukr.com" in result: return 0
                if "film.ua" in result: return 1
                if "kino-teatr.ua" in result: return 2
                if "imdb.com" in result: return 3
                if "themoviedb.org" in result: return 4
                return 5
            
            results.sort(key=sort_key)
            
            # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            max_results = 6 if is_premium else 4
            results = results[:max_results]
            
            return "\n\n".join(results)
        else:
            return "üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∫—ñ–Ω–æ-—Å–∞–π—Ç–∞—Ö üòî"
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}"

def ask_gemini(user_id, question, context_messages=None):
    if context_messages is None:
        context_messages = []
    
    context_text = "\n".join(context_messages[-3:])
    
    question_lower = question.lower()
    is_movie_query = any(word in question_lower for word in movie_keywords) and not any(word in question_lower for word in code_keywords)
    is_code_query = any(word in question_lower for word in code_keywords) and not any(word in question_lower for word in movie_keywords)
    
    search_results = ""
    current_year = datetime.datetime.now().year
    
    if is_movie_query:
        search_results = google_search(question, user_id)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º—ñ—É–º—É
        is_premium = False
        if user_id in user_data:
            user = user_data[user_id]
            is_premium = user.get('premium', {}).get('active', False) or user_id == ADMIN_ID
        
        if is_premium:
            prompt = f"""–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ—ñ–ª—å–º–∞—Ö, —Å–µ—Ä—ñ–∞–ª–∞—Ö —Ç–∞ –∞–Ω—ñ–º–µ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –î–ï–¢–ê–õ–¨–ù–û —Ç–∞ –ü–†–û–§–ï–°–Ü–ô–ù–û.

–ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫: {current_year}
–ó–∞–ø–∏—Ç: {question}

–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:
{search_results if search_results else "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

–í–ê–ñ–õ–ò–í–û: –Ø–∫—â–æ –∑–∞–ø–∏—Ç—É—é—Ç—å –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ —Ñ—ñ–ª—å–º–∏ ({current_year+1}+ —Ä—ñ–∫) - –ø–æ–∫–∞–∂–∏ –∞–Ω–æ–Ω—Å–æ–≤–∞–Ω—ñ —Ñ—ñ–ª—å–º–∏, —Ç—Ä–µ–π–ª–µ—Ä–∏, –æ—á—ñ–∫—É–≤–∞–Ω—ñ –ø—Ä–µ–º'—î—Ä–∏.

–í–∫–∞–∂–∏ –î–ï–¢–ê–õ–¨–ù–£ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ:
üé¨ **–ù–∞–∑–≤–∞**: 
üìÖ **–†—ñ–∫ –≤–∏–ø—É—Å–∫—É**: 
üåç **–ö—Ä–∞—ó–Ω–∞**: 
üé≠ **–ñ–∞–Ω—Ä**: 
‚≠ê **–†–µ–π—Ç–∏–Ω–≥**: 
‚è±Ô∏è **–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å**: 
üé• **–†–µ–∂–∏—Å–µ—Ä**: 
üë• **–ê–∫—Ç–æ—Ä–∏**: 
üìñ **–û–ø–∏—Å —Å—é–∂–µ—Ç—É** (3-5 —Ä–µ—á–µ–Ω—å):
üí° **–¶—ñ–∫–∞–≤—ñ —Ñ–∞–∫—Ç–∏**:
üéØ **–î–ª—è –∫–æ–≥–æ –ø—ñ–¥—ñ–π–¥–µ**:

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–∞–Ω—ñ –∑ –Ω–∞–¥—ñ–π–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª."""
        else:
            prompt = f"""–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ—ñ–ª—å–º–∞—Ö, —Å–µ—Ä—ñ–∞–ª–∞—Ö —Ç–∞ –∞–Ω—ñ–º–µ. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–û–ß–ù–û —Ç–∞ –ö–û–ù–ö–†–ï–¢–ù–û.

–ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫: {current_year}
–ó–∞–ø–∏—Ç: {question}

–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:
{search_results if search_results else "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"}

–í–ê–ñ–õ–ò–í–û: –Ø–∫—â–æ –∑–∞–ø–∏—Ç—É—é—Ç—å –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ —Ñ—ñ–ª—å–º–∏ ({current_year+1}+ —Ä—ñ–∫) - –ø–æ–∫–∞–∂–∏ –∞–Ω–æ–Ω—Å–æ–≤–∞–Ω—ñ —Ñ—ñ–ª—å–º–∏, —Ç—Ä–µ–π–ª–µ—Ä–∏, –æ—á—ñ–∫—É–≤–∞–Ω—ñ –ø—Ä–µ–º'—î—Ä–∏.

–í–∫–∞–∂–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ:
üé¨ –ù–∞–∑–≤–∞: 
üìÖ –†—ñ–∫ –≤–∏–ø—É—Å–∫—É: 
üåç –ö—Ä–∞—ó–Ω–∞: 
üé≠ –ñ–∞–Ω—Ä: 
‚≠ê –†–µ–π—Ç–∏–Ω–≥: 
üìñ –û–ø–∏—Å —Å—é–∂–µ—Ç—É (2-3 —Ä–µ—á–µ–Ω–Ω—è):

–Ø–∫—âo —Ç–æ—á–Ω–æ –Ω–µ –∑–Ω–∞—î—à - —Ç–∞–∫ —ñ —Å–∫–∞–∂–∏."""
    
    elif is_code_query:
        prompt = f"""–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç-–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ß–Ü–¢–ö–ò–ú –ö–û–î–û–ú –Ω–∞ –∑–∞–ø–∏—Ç.

–ó–∞–ø–∏—Ç: {question}

–í–ò–ú–û–ì–ò:
1. –ù–∞–¥–∞–π –ü–û–í–ù–ò–ô —Ä–æ–±–æ—á–∏–π –∫–æ–¥
2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑ ```
3. –î–æ–¥–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è
4. –í–∫–∞–∂–∏ –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"""
    
    else:
        prompt = f"""–¢–∏ –¥—Ä—É–∂–Ω—ñ–π AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–∏—Ä–æ–¥–Ω—åo —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ.

–ó–∞–ø–∏—Ç: {question}

–í–∏–º–æ–≥–∏:
1. –ë—É–¥—å –ø—Ä–∏—Ä–æ–¥–Ω—ñ–º —Ç–∞ –¥—Ä—É–∂–Ω—ñ–º
2. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ –∞–ª–µ –Ω–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ
3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ
4. –ë—É–¥—å –∫–æ—Ä–∏—Å–Ω–∏–º —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º"""

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {
            "maxOutputTokens": 2048 if is_movie_query and is_premium else 1024,
            "temperature": 0.7
        }
    }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=25)
        result = response.json()
        if "candidates" in result:
            reply = result["candidates"][0]["content"]["parts"][0]["text"]
            return reply
        else:
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ API."
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}"

def create_copy_button(code_text):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –∫–æ–¥", callback_data=f"copy_{hash(code_text)}"))
    return keyboard

def premium_menu_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"))
    kb.add(KeyboardButton("üí≥ –ö—É–ø–∏—Ç–∏ –ø—Ä–µ–º—ñ—É–º"))
    kb.add(KeyboardButton("üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"))
    kb.add(KeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
    return kb

def admin_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"))
    kb.add(KeyboardButton("üé´ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"))
    kb.add(KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–µ–º—ñ—É–º"))
    kb.add(KeyboardButton("‚è∞ –ü—Ä–µ–º—ñ—É–º –Ω–∞ —á–∞—Å"))
    kb.add(KeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"))
    kb.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    kb.add(KeyboardButton("‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º"))
    kb.add(KeyboardButton("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"))
    return kb

def bot_management_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    if BOT_ENABLED:
        kb.add(KeyboardButton("üî¥ –í–∏–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞"))
    else:
        kb.add(KeyboardButton("üü¢ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –±–æ—Ç–∞"))
    kb.add(KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"))
    kb.add(KeyboardButton("üîô –î–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ"))
    return kb

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üìä –ü—Ä–æ—Ñ—ñ–ª—å"))
    kb.add(KeyboardButton("üíé –ü—Ä–µ–º—ñ—É–º"))
    kb.add(KeyboardButton("üÜò –î–æ–ø–æ–º–æ–≥–∞"))
    if ADMIN_ID:
        kb.add(KeyboardButton("‚öôÔ∏è –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"))
    return kb

def help_text():
    return (
        "ü§ñ <b>–©–æ –º–æ–∂–µ —Ü–µ–π –±–æ—Ç:</b>\n\n"
        "üé¨ <b>–ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—ñ–≤/—Å–µ—Ä—ñ–∞–ª—ñ–≤/–∞–Ω—ñ–º–µ:</b>\n"
        "‚Ä¢ –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–∞ –Ω–∞–∑–≤–æ—é, —Ä–æ–∫–æ–º, –∫—Ä–∞—ó–Ω–æ—é\n"
        "‚Ä¢ –ü–æ—à—É–∫ –∑–∞ –æ–ø–∏—Å–æ–º —Å—é–∂–µ—Ç—É\n"
        "‚Ä¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ–π—Ç–∏–Ω–≥ —Ç–∞ –∂–∞–Ω—Ä\n\n"
        "üíª <b>–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É:</b>\n"
        "‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML/CSS/JS –∫–æ–¥—ñ–≤\n"
        "‚Ä¢ Python —Å–∫—Ä–∏–ø—Ç–∏ —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–∏\n"
        "‚Ä¢ –ó—Ä—É—á–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è\n\n"
        "üí¨ <b>–ó–≤–∏—á–∞–π–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:</b>\n"
        "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å-—è–∫—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è\n"
        "‚Ä¢ –î–æ–ø–æ–º–æ–≥–∞ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ç–µ–º\n\n"
        "üíé <b>–ü—Ä–µ–º—ñ—É–º —Å–∏—Å—Ç–µ–º–∞:</b>\n"
        "‚Ä¢ –ù–µ–æ–±–º–µ–∂–µ–Ω—ñ –∑–∞–ø–∏—Ç–∏\n"
        "‚Ä¢ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞\n"
        "‚Ä¢ –†–æ–∑—à–∏—Ä–µ–Ω–∞ –±–∞–∑–∞ –∫—ñ–Ω–æ—Å–∞–π—Ç—ñ–≤\n"
        "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ñ—à—ñ –æ–ø–∏—Å–∏ —Ñ—ñ–ª—å–º—ñ–≤\n"
        "‚Ä¢ –ë—ñ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É\n\n"
        f"üêû –¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞: {SUPPORT_USERNAME}"
    )

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
load_data()

@bot.message_handler(commands=["start"])
def start(message):
    if not check_bot_enabled(message):
        return
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {
            "_id": user_id,
            "used": 0,
            "premium": {"active": False, "until": None},
            "reset": get_ukraine_time().date().isoformat(),
            "history": [],
            "free_used": False,
            "last_movie_query": None,
            "last_code": None,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
    else:
        user_data[user_id]["username"] = message.from_user.username
        user_data[user_id]["first_name"] = message.from_user.first_name
        user_data[user_id]["last_name"] = message.from_user.last_name
    
    save_data()
    bot.reply_to(message, "üëã –í—ñ—Ç–∞—é! –Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫! –ú–æ–∂—É:\n‚Ä¢ üé¨ –®—É–∫–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏/—Å–µ—Ä—ñ–∞–ª–∏/–∞–Ω—ñ–º–µ\n‚Ä¢ üíª –ü–∏—Å–∞—Ç–∏ –∫–æ–¥\n‚Ä¢ üí¨ –í—ñ–ª—å–Ω–æ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—å\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ! üòä", reply_markup=main_menu())

# ... (—Ä–µ—à—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–º–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∫–æ–¥—É)

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    if not check_bot_enabled(message):
        return
    user_id = message.from_user.id
    
    if user_id not in user_data:
        user_data[user_id] = {
            "_id": user_id,
            "used": 0,
            "premium": {"active": False, "until": None},
            "reset": get_ukraine_time().date().isoformat(),
            "history": [],
            "free_used": False,
            "last_movie_query": None,
            "last_code": None,
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name
        }
        save_data()
    else:
        user_data[user_id]["username"] = message.from_user.username
        user_data[user_id]["first_name"] = message.from_user.first_name
        user_data[user_id]["last_name"] = message.from_user.last_name
        save_data()
    
    user = user_data[user_id]
    today = get_ukraine_time().date()
    
    if isinstance(user["reset"], str):
        reset_date = datetime.date.fromisoformat(user["reset"])
    else:
        reset_date = user["reset"]
    
    if reset_date != today:
        user["used"] = 0
        user["reset"] = today.isoformat()
        save_data()
    
    if user["premium"]["active"] and user["premium"]["until"] is not None:
        if isinstance(user["premium"]["until"], str):
            until_date = datetime.datetime.fromisoformat(user["premium"]["until"])
            if until_date.tzinfo is None:
                until_date = UKRAINE_TZ.localize(until_date)
        else:
            until_date = user["premium"]["until"]
        
        if until_date < get_ukraine_time():
            user["premium"] = {"active": False, "until": None}
            save_data()
    
    is_premium = user["premium"]["active"] or user_id == ADMIN_ID
    if not is_premium and user["used"] >= FREE_LIMIT:
        if not user["free_used"]:
            user["free_used"] = True
            save_data()
            bot.reply_to(message, f"‚ùå –í–∏ –≤–∏—á–µ—Ä–ø–∞–ª–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ª—ñ–º—ñ—Ç ({FREE_LIMIT} –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –¥–µ–Ω—å).\n\nüíé –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–µ–º—ñ—É–º –¥–ª—è –Ω–µ–æ–±–º–µ–∂–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤!", reply_markup=premium_menu_keyboard())
        else:
            bot.reply_to(message, f"‚ùå –õ—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–µ–º—ñ—É–º üíé", reply_markup=premium_menu_keyboard())
        return
    
    user["used"] += 1
    user["history"].append(message.text)
    if len(user["history"]) > 10:
        user["history"].pop(0)
    
    save_data()
    
    question = message.text.lower()
    is_movie_query = any(word in question for word in movie_keywords) and not any(word in question for word in code_keywords)
    is_code_query = any(word in question for word in code_keywords) and not any(word in question for word in movie_keywords)
    
    if is_movie_query:
        user["last_movie_query"] = message.text
        search_results = google_search(message.text, user_id)
        if "üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" not in search_results:
            premium_status = " (–ø—Ä–µ–º—ñ—É–º –ø–æ—à—É–∫)" if is_premium else ""
            bot.reply_to(message, f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É{premium_status}:</b>\n\n{search_results}\n\nüìù <b>–ê –æ—Å—å –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>", parse_mode="HTML")
    
    bot.send_chat_action(message.chat.id, "typing")
    response = ask_gemini(user_id, message.text, user["history"])
    
    if is_code_query and "```" in response:
        user["last_code"] = response
        bot.reply_to(message, response, parse_mode="Markdown", reply_markup=create_copy_button(response))
    else:
        bot.reply_to(message, response)

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º–∏ —Å–∞–π—Ç–∞–º–∏ —Ç–∞ —Ä–æ–∑—É–º–Ω–∏–º –ø–æ—à—É–∫–æ–º!")
    print(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ø–∞–º'—è—Ç—ñ: {len(user_data)}")
    
    threading.Timer(AUTOSAVE_INTERVAL, auto_save).start()
    
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        exit_handler()